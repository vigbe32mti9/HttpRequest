using System.Text; using Newtonsoft.Json; using System.Net.Http.Headers; using Newtonsoft.Json.Serialization;  namespace System.Net.Http; public class RequestHandler(IHttpClientFactory httpClientFactory) {     private readonly HttpClient _httpClient = httpClientFactory.CreateClient();      public async Task<T> Send<T>(Request request)     {         if (!string.IsNullOrEmpty(request.Token))             _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", request.Token.Replace("Bearer",""));          var httpResponse = await SendRequest(request);         var response = await ResponseMessageHandler.Set<T>(httpResponse);         return response;     }      private Task<HttpResponseMessage> SendRequest(Request request)     {         if (request.Method == HttpMethod.Get) return _httpClient.GetAsync(request.Url);         else if (request.Method == HttpMethod.Delete) return _httpClient.DeleteAsync(request.Url);         else if (request.Method == HttpMethod.Post || request.Method == HttpMethod.Put)         {             var jsonSetting = new JsonSerializerSettings { ContractResolver = new CamelCasePropertyNamesContractResolver() };             var param = JsonConvert.SerializeObject(request.Param, jsonSetting);             var content = new StringContent(param, Encoding.UTF8, "application/json");              if (request.Method == HttpMethod.Post) return _httpClient.PostAsync(request.Url, content);             else if (request.Method == HttpMethod.Put) return _httpClient.PutAsync(request.Url, content);         }          throw new NotImplementedException(nameof(request.Method)+" -> The HTTP POST method is not supported at the moment.");     } } 